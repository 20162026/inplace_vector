# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

name: Continuous Integration Tests

on:
  push:
  pull_request:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  schedule:
    - cron: '30 15 * * *'

jobs:
  preset-test:
    strategy:
      fail-fast: false
      matrix:
        presets:
          - preset: gcc-debug
            tag: "gcc:14"
          - preset: gcc-release
            tag: "gcc:14"
    name: "Preset: ${{ matrix.presets.preset }}"
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/bemanproject/testingcontainers-${{ matrix.presets.tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup MSVC
        if: startsWith(matrix.presets.platform, 'windows')
        uses: TheMrMilchmann/setup-msvc-dev@v3
        with:
          arch: x64
      - name: Run preset
        run: cmake --workflow --preset ${{ matrix.presets.preset }}

  test:
    strategy:
      fail-fast: false
      matrix:
        compiler:
          - cpp: g++
            c: gcc
            tag: "gcc:14"
          - cpp: clang++
            c: clang
            tag: "clang:20"
        cpp_version: [20, 23]
        cmake_args:
          - description: "Default"
            args: ""
          - description: "TSan"
            args: "-DCMAKE_CXX_FLAGS=-fsanitize=thread"
          - description: "ASan"
            args: "-DCMAKE_CXX_FLAGS='-fsanitize=address -fsanitize=undefined'"
        include:
          - platform: ubuntu-24.04
            compiler:
              cpp: g++
              c: gcc
              tag: "gcc:14"
            cpp_version: 20
            cmake_args:
              description: "Dynamic"
              cmake_args: "-DBUILD_SHARED_LIBS=on"

    name: "Build & Test: ${{ matrix.compiler.c }} ${{ matrix.cpp_version }} ${{ matrix.cmake_args.description }}"
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/bemanproject/testingcontainers-${{ matrix.compiler.tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Print installed software
        run: |
          cmake --version
          ninja --version
          ctest --version
      - name: Configure CMake
        run: |
          cmake -B build -S . -DCMAKE_CXX_STANDARD=${{ matrix.cpp_version }} ${{ matrix.cmake_args.args }}
        env:
          CC: ${{ matrix.compiler.c }}
          CXX: ${{ matrix.compiler.cpp }}
          CMAKE_GENERATOR: "Ninja Multi-Config"
      - name: Build Release
        run: |
          cmake --build build --config Release --verbose
          # TODO: cmake --build build --config Release --target all_verify_interface_header_sets
          cmake --install build --config Release --prefix /tmp/beman.inplace_vector
          find /tmp/beman.inplace_vector -type f
      - name: Test Release
        run: ctest --test-dir build --build-config Release
      - name: Build Debug
        run: |
          cmake --build build --config Debug --verbose
          # TODO: cmake --build build --config Debug --target all_verify_interface_header_sets
          cmake --install build --config Debug --prefix /tmp/beman.inplace_vector
          find /tmp/beman.inplace_vector -type f
      - name: Test Debug
        run: ctest --test-dir build --build-config Debug

  compiler-test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        compilers:
          - class: gcc
            version: 14
          - class: gcc
            version: 13
          - class: gcc
            version: 12
          - class: clang
            version: 20
          - class: clang
            version: 19
          - class: clang
            version: 18
          - class: clang
            version: 17
    container:
      image: ghcr.io/bemanproject/testingcontainers-${{ matrix.compilers.class }}:${{ matrix.compilers.version }}
    name: "Compiler: ${{ matrix.compilers.class }} ${{ matrix.compilers.version }}"
    steps:
      - uses: actions/checkout@v4
      - name: Configure CMake
        run: cmake -B build -S . -DCMAKE_CXX_STANDARD=20
        env:
          CMAKE_GENERATOR: "Ninja Multi-Config"
      - name: Build Debug
        run: |
          cmake --build build --config Debug --verbose
          # cmake --build build --config Debug --target all_verify_interface_header_sets
          cmake --install build --config Debug --prefix /tmp/beman.exemplar
          find /tmp/beman.exemplar -type f
      - name: Test Debug
        run: ctest --test-dir build --build-config Debug

  create-issue-when-fault:
    runs-on: ubuntu-latest
    needs: [test]
    if: failure() && github.event_name == 'schedule'
    steps:
      # See https://github.com/cli/cli/issues/5075
      - uses: actions/checkout@v4
      - name: Create issue
        run: |
          issue_num=$(gh issue list -s open -S "[SCHEDULED-BUILD] Build & Test failure" -L 1 --json number | jq 'if length == 0 then -1 else .[0].number end')

          body="**Build-and-Test Failure Report**
          - **Time of Failure**: $(date -u '+%B %d, %Y, %H:%M %Z')
          - **Commit**: [${{ github.sha }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
          - **Action Run**: [View logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

          The scheduled build-and-test triggered by cron has failed.
          Please investigate the logs and recent changes associated with this commit or rerun the workflow if you believe this is an error."

          if [[ $issue_num -eq -1 ]]; then
            gh issue create --repo ${{ github.repository }} --title "[SCHEDULED-BUILD] Build & Test failure" --body "$body"
          else
            gh issue comment --repo ${{ github.repository }} $issue_num --body "$body"
          fi
        env:
          GH_TOKEN: ${{ github.token }}
